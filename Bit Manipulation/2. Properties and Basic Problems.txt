1. To check if two number are same or not:
   we use XOR(^) operator
   there are two numbers, say a and b.
   if (a^b == 0) {
      a is equal to b;
   }
   else {
      a is not equal to b;
   }

2. To find XOR of 'N' numbers, we follow simple pattern of 4 methodology
   XOR(1) = 1
   XOR(2) = 3
   XOR(3) = 0
   XOR(4) = 4
   XOR(5) = 1
   XOR(6) = 7
   XOR(7) = 0
   XOR(8) = 8
   based on above observation: 
   if(N % 4 == 0) {
      XOR(N) = N;
   }
   if(N % 4 == 1) {
      XOR(N) = 1;
   }
   if(N % 4 == 2) {
      XOR(N) = N+1;
   }
   if(N % 4 == 3) {
      XOR(N) = 0;
   }

3. To find XOR of numbers in the range 'L to R', then
   XOR('L' to 'R') = XOR(L-1)^XOR(R)

4. To check if a number is even or odd,
   if(N & 1 == 1) {
      odd;
   }
   else {
      even;
   }
   PROOF: Every number in binary is formed by power of 2. An odd number will always have the LSB as 1(2 to the power 0) which when gets (&) with 1 returns 1 thus, an odd number. The reverse of this wil prove that number is even.

5. To check if i'th bit is set or not, we can do an AND(&) operation of i'th bit and 1. If it will be set, it will evalute to a non-zero otherwise, 
   it will evaluate to zero. To create a number which has 1 in his i'th poisition and zero in all other poisitions, we use a left shift operator.
   mask = (1 << i)
   res = N & res
   if(res == 0) {
      not set;
   }
   else {
      set;
   }

6. To set the i'th bit, we can do an OR(|) operation of i'th bit and 1. If it will be set, the resultant will have value equal to the orignal      
   number otherwise, it will set the i'th bit. To create a number which has 1 in his i'th poisition and zero in all other poisitions, we use a left shift operator.
   mask = (1 << i)
   res = N | mask
   return res;

7. To clear the i'th bit, we can do AND(&) operation of i'th bit and 0. It it will be set, the bit will become clear otherwise it will remian 
   unchanged. To create a number which has 0 in his i'th poisition and 1 in all other positions, we will use left-shift and negation operator both.
   mask = ~(1 << i)
   res = N & mask
   return res;

8. To remove the last set bit, we will do AND(&) operation of N and N-1.

9. XOR of all XOR(s) of every subset of an array is zero as every number will appear even number of times and XOR of any number appearing even 
   number of times will be zero.
   arr = {1,2,3};
   subsests => { [] , [1] , [2] , [3] , [1,2] , [1,3] , [2,3] , [1,2,3] }
   XOR will be zero.

10. To count the number of bits we can use the following formula:
2^x = N
x = log2(N) + 1
to calculate log2(N), we can use the following formula:
log2(N) = log10(N) / log10(2)
therefore, x(number of bits) = log10(N) / log10(2) + 1

11. To find the complement of a number, we can use the following formula:
   mask = (1 << x) - 1;
   complement = N ^ mask;
   where x is the number of bits in the number.
The reason this code works is because the mask will have all bits set to 1 up to the most significant bit of N. 
When you XOR N with this mask, all the bits of N will be flipped.

   